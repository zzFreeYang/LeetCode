服务治理:
    为了对服务进行统一、有效的管控，从而保障服务的高效，健康运行而诞生的服务治理框架，比如Dubbo
Dubbo:(RPC框架)
    RPC:
        含义:远程过程调用。 通俗的说是A服务器想要调用B服务器的方法。
        要点1:Call ID映射 。在RPC中，所有的函数都必须有自己的一个ID。这个ID在所有进程中都是唯一确定的，通过ID来调用方法。
        要点2:序列化和反序列化。  通过序列化来传输数据
        要点3:网络传输。  具体可以选择不同的协议与框架，比如Netty ZeroMQ
    Dubbo的优点:不仅是一个PRC框架，还带有服务治理的功能。
    服务治理功能:服务注册、监控、路由、容错等

ZooKeeper:（Dubbo推荐的可以实现注册中心这个场景的分布式协调中间件）
    ZooKeeper的结构，是一种层次化的属性结构。数据是结构化存储的。类似于一颗 ZooKeeper树，树中的每个节点称作Znode，Znode维护了一个stat状态信息，包括数据变化的时间和版本
    Watcher机制:针对Znode的订阅/通知机制。当Znode节点状态发生变化或者连接状态发生变化的时候会触发事件通知。
    常见应用场景:
        1.分布式锁: 使用节点的特性:临时节点与同级节点的唯一性 来保证唯一性。  比如在获得锁的时候可以去ZooKeeper服务器上创建临时节点。没有获得锁的客户端可以通过Watcher机制监听节点的变更事件。

        2. Master选举: 当原有的Master节点出现故障之后，需要从集群的其他备份节点中选择一个节点作为Master继续提供服务。
            方法a. 利用同级节点的唯一性
            方法b. 利用临时有序节点

     CAP 一致性，可用性，分区容忍性
     ZooKeeper 是CP
     注册中心应该是AP的





