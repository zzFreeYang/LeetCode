Redis

1. Redis的应用场景
2. Redis支持的数据类型（必考）
3. zset跳表的数据结构（必考）
4. Redis的数据过期策略（必考）
5. Redis的LRU过期策略的具体实现
6. 如何解决Redis缓存雪崩，缓存穿透问题
7. Redis的持久化机制（必考）
8. Redis的管道pipeline



1.Redis的应用场景:


2.Redis支持的数据类型:
    Redis共有五种类型的对象：（Redis使用了下面这些底层的数据结构，来构成这五种类型的对象）
                              底层数据结构类型:SDS简单动态字符串，双端链表，字典，压缩列表，整数集合;
                              因此，对象有一个Type属性，分别为 string,list,hash,set,zset.
    1.字符串: (simple dynamic string ,SDS)简单动态字符串。
        SDS和普通C字符串区别:
            结构上:struct sdshdr{
                int len ; //SDS所保存字符串的长度
                int free; //buf 数组中未使用字节的长度
                char buf[];//字节数组，用于保存字符串
            }
        好处: a.可以直接重用C字符串函数库的函数
              b.常数复杂度获取字符串长度
              c.利用free来杜绝缓冲区溢出
              d.减少修改字符串时带来的内存重分配次数( 通过free和len来做预分配;惰性空间释放（优化字符串缩短)
              e.用len长度判断而不是 \0判断结束，保证二进制安全


    2.列表对象
        列表键的底层实现1: 链表 (双端 prev,next指针;无环:双端指针指向null;带表头表尾指针;带链表长度计数器;


    3.哈希对象
        哈希键的底层实现1: 字典 （举例： 通过HSET给person设置多个键值对,age 20,name jack，然后可以通过hgetall person 来获取）
        字典的底层就是hash,基本结构:哈希表数组 + 哈希表大小 size + 哈希表大小掩码(计算索引) sizemask + 已有节点的数量 used
        解决键冲突:链地址法

    4.集合对象
    底层使用了 整数集合 （intset）

    5.有序集合对象
    使用了跳跃表

============================================ ===================================================
Redis特性：
a.Redis构建了通过引用计数技术实现的内存回收机制
b.对象共享: 多个键共享同一个值对象（验证共享对象和目标对象的复杂度决定了，Redis选择了只共享整数值的字符串对象）


==============================================================================

 Redis的数据过期策略（必考）:
 首先,Redis使用了过期字典来保存所有键的过期时间（ key 是指针，指向某个键对象，value是long long类型整数，保存了键的过期时间）
 Redis服务器使用的是  惰性删除 和 定期删除 两种策略.
 惰性删除:在使用前对输入键做查询
定期删除 : 实现：周期性的遍历各个数据库，随机检查一部分键的过期时间(限制时间)，并删除过期键


========================= ================================================

如何解决Redis缓存雪崩，缓存穿透问题


缓存击穿的概念就是单个key并发访问过高，过期时导致所有请求直接打到db上
1.加锁更新，比如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写入缓存，再返回给用户，这样后面的请求就可以从缓存中拿到数据了。
2.将过期时间组合写在value中，通过异步的方式不断的刷新过期时间，防止此类现象。

缓存穿透是指查询不存在缓存中的数据，每次请求都会打到DB，就像缓存不存在一样。
1.加一层布隆过滤器。布隆过滤器的原理是在你存入数据的时候，会通过散列函数将它映射为一个位数组中的K个点，同时把他们置为1。
这样当用户再次来查询A，而A在布隆过滤器值为0，直接返回，就不会产生击穿请求打到DB了。
PS：布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。（使用BitMap）


===================== ======================================
Redis的持久化机制
1.RBD持久化
使用两个指令来生成RDB文件。 SAVE 和 BGSAVE 。  RDB文件和 数据库状态可以相互转换
SAVE :阻塞Redis服务器进程来创建RDB文件
BGSAVE:创建子线程来创建RDB文件

RBD文件的载入:
Redis服务器在启动的时候检测到RDB文件存在，则自动载入RDB文件( 载入的时候是阻塞状态

2.AOF持久化 （ append only file）
AOF是通过保存Redis服务器执行的写命令来记录数据库状态的


================== ================================================

Redis的管道pipeline

Redis的多路复用: IO多路复用程序负责监听多个套接字，并向文件事件分派器传送那些产生了事件的套接字。

