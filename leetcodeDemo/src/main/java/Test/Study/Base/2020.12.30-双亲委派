Java 的类加载过程分为三个主要步骤：加载、链接、初始化

加载阶段（Loading）: Java 将字节码数据从不同的数据源读取到 JVM 中，并映射为 JVM 认可的数据结构（Class 对象）
                      加载阶段是用户参与的阶段，我们可以自定义类加载器，去实现自己的类加载过程。

链接（Linking）   简单说是把原始的类定义信息平滑地转化入 JVM 运行的过程中
                   分为三个步骤：
                   验证（Verification），这是虚拟机安全的重要保障，JVM 需要核验字节信息是符合 Java 虚拟机规范的，否则就被认为是 VerifyError，
                                          这样就防止了恶意信息或者不合规的信息危害 JVM 的运行，验证阶段有可能触发更多 class 的加载。
                   准备（Preparation），创建类或接口中的静态变量，并初始化静态变量的初始值。但这里的“初始化”和下面的显式初始化阶段是有区别的，
                                          侧重点在于分配所需要的内存空间，不会去执行更进一步的 JVM 指令。
                   解析（Resolution），在这一步会将常量池中的符号引用（symbolic reference）替换为直接引用。在Java 虚拟机规范中，
                                          详细介绍了类、接口、方法和字段等各个方面的解析。

初始化阶段（initialization）:，这一步真正去执行类初始化的代码逻辑，包括静态字段赋值的动作，以及执行类定义中的静态初始化块内的逻辑，
                                编译器在编译阶段就会把这部分逻辑整理好，父类型的初始化逻辑优先于当前类型的逻辑。

//========================================== ===============================================================================================================

双亲委派模型，简单说就是当类加载器（Class-Loader）试图加载某个类型的时候，除非父加载器找不到相应类型，否则尽量将这个任务代理给当前加载器的父加载器去做。
使用委派模型的目的是避免重复加载 Java 类型。

